name: Automated Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

jobs:
  dependency-updates:
    name: Check and Update Dependencies
    runs-on: ubuntu-latest
    if: github.repository_owner == 'korallis' # Only run on main repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for security vulnerabilities
        run: |
          echo "🔍 Checking for security vulnerabilities..."
          npm audit --audit-level=moderate
          if [ $? -ne 0 ]; then
            echo "⚠️ Security vulnerabilities found - will create security update PR"
            echo "SECURITY_UPDATES_NEEDED=true" >> $GITHUB_ENV
          fi

      - name: Check for outdated dependencies
        run: |
          echo "🔍 Checking for outdated dependencies..."
          npx npm-check-updates --doctor --target minor
          if [ $? -ne 0 ]; then
            echo "📦 Minor updates available"
            echo "MINOR_UPDATES_AVAILABLE=true" >> $GITHUB_ENV
          fi

      - name: Update minor and patch versions
        if: env.MINOR_UPDATES_AVAILABLE == 'true'
        run: |
          echo "📦 Updating minor and patch versions..."
          npx npm-check-updates --target minor --upgrade
          npm install

          # Check if package.json was modified
          if git diff --quiet package.json package-lock.json; then
            echo "✅ No updates needed"
          else
            echo "UPDATES_MADE=true" >> $GITHUB_ENV
          fi

      - name: Run tests after updates
        if: env.UPDATES_MADE == 'true'
        run: |
          echo "🧪 Running tests with updated dependencies..."
          npm run lint
          npm run type-check
          npm run test
          npm run build
        env:
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          EVE_CLIENT_ID: test-client-id
          EVE_CLIENT_SECRET: test-client-secret
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379

      - name: Create Pull Request for updates
        if: env.UPDATES_MADE == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create branch
          BRANCH_NAME="automated-dependency-updates-$(date +%Y%m%d)"
          git checkout -b "$BRANCH_NAME"

          # Commit changes
          git add package.json package-lock.json
          git commit -m "chore: automated dependency updates

          - Updated minor and patch versions
          - All tests passing
          - Security vulnerabilities addressed: ${{ env.SECURITY_UPDATES_NEEDED == 'true' && 'Yes' || 'No' }}

          Auto-generated by dependency update workflow"

          # Push branch
          git push origin "$BRANCH_NAME"

          # Create PR
          gh pr create \
            --title "🔄 Automated Dependency Updates - $(date +%Y-%m-%d)" \
            --body "## 📦 Automated Dependency Updates

          This PR contains automated updates to project dependencies.

          ### Changes Made
          - ✅ Updated minor and patch versions
          - ✅ Security vulnerabilities: ${{ env.SECURITY_UPDATES_NEEDED == 'true' && 'Addressed' || 'None found' }}
          - ✅ All tests passing
          - ✅ Build successful

          ### Quality Checks
          - 🔍 Linting: Passed
          - 🔧 Type checking: Passed  
          - 🧪 Tests: Passed
          - 🏗️ Build: Passed

          This PR is safe to merge and will be automatically merged if all CI checks pass.

          ---
          *Generated by automated dependency update workflow*" \
            --label "dependencies,auto-merge,automated" \
            --assignee "korallis"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for major version updates
        run: |
          echo "🔍 Checking for major version updates..."
          MAJOR_UPDATES=$(npx npm-check-updates --target major --jsonUpgraded)

          if [ "$MAJOR_UPDATES" != "{}" ]; then
            echo "⚠️ Major version updates available:"
            echo "$MAJOR_UPDATES" | jq -r 'to_entries[] | "  • \(.key): \(.value)"'
            
            # Create issue for manual review of major updates
            gh issue create \
              --title "🚨 Major Dependency Updates Available - $(date +%Y-%m-%d)" \
              --body "## 🚨 Major Version Updates Available
            
            The following dependencies have major version updates available that require manual review:
            
            \`\`\`json
            $MAJOR_UPDATES
            \`\`\`
            
            ### Action Required
            These updates may contain breaking changes and should be reviewed manually:
            
            1. Review the changelog for each dependency
            2. Test the updates in a separate branch
            3. Update code if necessary to handle breaking changes
            4. Create a PR with the major updates
            
            ### Commands to Update
            \`\`\`bash
            npx npm-check-updates --target major --upgrade
            npm install
            npm run test
            \`\`\`
            
            ---
            *Generated by automated dependency update workflow*" \
              --label "dependencies,major-update,manual-review" \
              --assignee "korallis"
          else
            echo "✅ No major updates available"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate dependency report
        run: |
          echo "📊 Generating dependency report..."

          # Create report
          cat > dependency-report.md << EOF
          # Dependency Report - $(date +%Y-%m-%d)

          ## Security Status
          \`\`\`bash
          $(npm audit --audit-level=moderate 2>&1 || echo "Security vulnerabilities found")
          \`\`\`

          ## Outdated Packages
          \`\`\`bash
          $(npx npm-check-updates 2>&1)
          \`\`\`

          ## License Compliance
          \`\`\`bash
          $(npx license-checker --summary 2>&1)
          \`\`\`

          ## Unused Dependencies
          \`\`\`bash
          $(npx depcheck --ignores="@types/*,eslint-config-*,prettier-plugin-*,husky,lint-staged" 2>&1)
          \`\`\`

          ---
          Generated on $(date)
          EOF

          echo "📋 Dependency report generated"

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report-${{ github.run_number }}
          path: dependency-report.md
          retention-days: 30

  security-audit:
    name: Weekly Security Audit
    runs-on: ubuntu-latest
    if: github.repository_owner == 'korallis'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive security audit
        run: |
          echo "🔒 Running comprehensive security audit..."

          # Run npm audit
          npm audit --audit-level=low --json > npm-audit.json || true

          # Run better-npm-audit
          npx better-npm-audit audit --level moderate --json > better-audit.json || true

          # Check for known vulnerabilities
          npx audit-ci --moderate --json > audit-ci.json || true

      - name: Process security results
        run: |
          echo "📊 Processing security audit results..."

          # Count vulnerabilities
          HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')

          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          echo "High vulnerabilities: $HIGH_VULNS"

          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "SECURITY_ISSUES_FOUND=true" >> $GITHUB_ENV
            echo "CRITICAL_COUNT=$CRITICAL_VULNS" >> $GITHUB_ENV
            echo "HIGH_COUNT=$HIGH_VULNS" >> $GITHUB_ENV
          fi

      - name: Create security issue
        if: env.SECURITY_ISSUES_FOUND == 'true'
        run: |
          gh issue create \
            --title "🚨 Security Vulnerabilities Detected - $(date +%Y-%m-%d)" \
            --body "## 🚨 Security Alert

          Automated security scan detected vulnerabilities in project dependencies.

          ### Vulnerability Summary
          - 🔴 Critical: ${{ env.CRITICAL_COUNT }}
          - 🟠 High: ${{ env.HIGH_COUNT }}

          ### Action Required
          1. Review the security audit artifacts
          2. Update vulnerable dependencies
          3. Test the application thoroughly
          4. Deploy security fixes immediately

          ### Commands to Fix
          \`\`\`bash
          npm audit fix
          npm audit fix --force  # If automatic fix fails
          \`\`\`

          ### Audit Results
          See attached artifacts for detailed vulnerability information.

          ---
          *Generated by automated security audit workflow*" \
            --label "security,critical,urgent" \
            --assignee "korallis"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload security audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: |
            npm-audit.json
            better-audit.json
            audit-ci.json
          retention-days: 90
