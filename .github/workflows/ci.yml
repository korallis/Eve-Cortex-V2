name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run weekly dependency checks every Monday at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  # Security and Dependency Audit
  security-audit:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate
          if [ $? -ne 0 ]; then
            echo "❌ Security vulnerabilities found!"
            exit 1
          fi

      - name: Check for deprecated dependencies
        run: |
          echo "🔍 Checking for deprecated dependencies..."
          npx better-npm-audit audit --level moderate
          if [ $? -ne 0 ]; then
            echo "❌ Deprecated or vulnerable dependencies found!"
            exit 1
          fi

      - name: Check for unused dependencies
        run: |
          echo "🔍 Checking for unused dependencies..."
          npx depcheck --ignores="@types/*,eslint-config-*,prettier-plugin-*,husky,lint-staged"
          if [ $? -ne 0 ]; then
            echo "⚠️ Unused dependencies found!"
          fi

      - name: Check for outdated dependencies
        run: |
          echo "🔍 Checking for outdated dependencies..."
          npx npm-check-updates --errorLevel 2
          if [ $? -ne 0 ]; then
            echo "⚠️ Major version updates available!"
          fi

      - name: Validate package.json
        run: |
          echo "🔍 Validating package.json..."
          node -e "
            const pkg = require('./package.json');
            const deps = {...pkg.dependencies, ...pkg.devDependencies};
            
            // Check for deprecated packages
            const deprecatedPackages = [
              'request', 'node-sass', 'gulp', 'bower', 'grunt',
              'babel-core', 'babel-preset-env', 'babel-preset-react',
              'tslint', 'protractor', 'karma', 'phantomjs',
              'node-gyp-build', 'fsevents', 'chokidar'
            ];
            
            const foundDeprecated = Object.keys(deps).filter(dep => 
              deprecatedPackages.some(deprecated => dep.includes(deprecated))
            );
            
            if (foundDeprecated.length > 0) {
              console.error('❌ Deprecated packages found:', foundDeprecated);
              process.exit(1);
            }
            
            console.log('✅ No deprecated packages found');
          "

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint
          if [ $? -ne 0 ]; then
            echo "❌ ESLint errors found!"
            exit 1
          fi

      - name: Run Prettier check
        run: |
          echo "🔍 Checking code formatting..."
          npm run format:check
          if [ $? -ne 0 ]; then
            echo "❌ Code formatting issues found!"
            exit 1
          fi

      - name: Run TypeScript check
        run: |
          echo "🔍 Running TypeScript check..."
          npm run type-check
          if [ $? -ne 0 ]; then
            echo "❌ TypeScript errors found!"
            exit 1
          fi

  # Testing
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: eve_cortex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test database migrations
        run: |
          echo "🗃️ Testing database migrations..."
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/eve_cortex_test
          NODE_ENV: test

      - name: Test database seeding
        run: |
          echo "🌱 Testing database seeding..."
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/eve_cortex_test
          NODE_ENV: test

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/eve_cortex_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build Test
  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          echo "🏗️ Building application..."
          npm run build
        env:
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          EVE_CLIENT_ID: test-client-id
          EVE_CLIENT_SECRET: test-client-secret
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379

      - name: Check build output
        run: |
          echo "🔍 Checking build output..."
          if [ ! -d ".next" ]; then
            echo "❌ Build output directory not found!"
            exit 1
          fi

          if [ ! -f ".next/BUILD_ID" ]; then
            echo "❌ Build ID file not found!"
            exit 1
          fi

          echo "✅ Build completed successfully!"

  # License and Legal Compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          echo "📄 Checking dependency licenses..."
          npx license-checker --summary --excludePrivatePackages --failOn 'GPL;AGPL;LGPL;UNLICENSED'
          if [ $? -ne 0 ]; then
            echo "❌ Incompatible licenses found!"
            exit 1
          fi
          echo "✅ All licenses are compatible!"

  # Auto-merge for dependabot and approved PRs
  auto-merge:
    name: Auto-merge PR
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality, test, build, license-check]
    if: |
      github.event_name == 'pull_request' && 
      (github.actor == 'dependabot[bot]' || 
       github.actor == 'korallis' ||
       contains(github.event.pull_request.labels.*.name, 'auto-merge'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check PR approval status
        id: approval
        run: |
          echo "🔍 Checking PR approval status..."
          APPROVALS=$(gh pr view ${{ github.event.pull_request.number }} --json reviews --jq '[.reviews[] | select(.state == "APPROVED")] | length')
          echo "Approvals: $APPROVALS"

          # For dependabot PRs, we don't require manual approval
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            echo "🤖 Dependabot PR - auto-approval enabled"
            echo "approved=true" >> $GITHUB_OUTPUT
          elif [[ "$APPROVALS" -gt 0 ]] || [[ "${{ github.actor }}" == "korallis" ]]; then
            echo "✅ PR has required approvals"
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "❌ PR requires approval before auto-merge"
            echo "approved=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge
        if: steps.approval.outputs.approved == 'true'
        run: |
          echo "🤖 Enabling auto-merge for PR #${{ github.event.pull_request.number }}"
          gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add success comment
        if: steps.approval.outputs.approved == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "
          ## ✅ All Quality Gates Passed!

          ### Security & Dependencies
          - 🔒 Security audit: **PASSED**
          - 📦 Dependency check: **PASSED**
          - 📄 License compliance: **PASSED**

          ### Code Quality
          - 🧹 ESLint: **PASSED**
          - 🎨 Prettier: **PASSED**
          - 🔧 TypeScript: **PASSED**

          ### Testing & Build
          - 🗃️ Database migrations: **PASSED**
          - 🌱 Database seeding: **PASSED**
          - 🧪 Unit tests: **PASSED**
          - 🏗️ Build: **PASSED**

          ### Auto-merge Status
          - ✅ All checks passed
          - ✅ Required approvals: ${{ github.actor == 'dependabot[bot]' && 'Not required (Dependabot)' || 'Satisfied' }}
          - 🤖 **Auto-merge enabled** - This PR will be merged automatically

          ---
          *Quality gates enforced by CI/CD pipeline*
          "
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add approval required comment
        if: steps.approval.outputs.approved == 'false'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "
          ## ⏳ Approval Required

          All automated checks have passed, but this PR requires manual approval before auto-merge can proceed.

          ### ✅ Completed Checks
          - 🔒 Security audit: **PASSED**
          - 📦 Dependency check: **PASSED**
          - 🧹 Code quality: **PASSED**
          - 🧪 Tests: **PASSED**
          - 🏗️ Build: **PASSED**
          - 📄 License check: **PASSED**

          ### 👥 Next Steps
          - A maintainer needs to review and approve this PR
          - Once approved, auto-merge will be enabled automatically

          ---
          *Waiting for manual approval to proceed with auto-merge*
          "
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add failure comment
        if: failure()
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "
          ## ❌ Auto-merge Failed!

          There was an issue enabling auto-merge for this PR. Please check the workflow logs for details.

          ### Possible Issues
          - GitHub API rate limiting
          - Insufficient permissions
          - Branch protection rule conflicts
          - Network connectivity issues

          ### Manual Resolution
          You can manually merge this PR since all quality gates have passed.

          ---
          *Auto-merge workflow encountered an error*
          "
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Dependency Update Check (runs weekly)
  dependency-update:
    name: Weekly Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for updates
        run: |
          echo "🔍 Checking for dependency updates..."
          npx npm-check-updates --doctor --upgrade

          if git diff --quiet package.json; then
            echo "✅ All dependencies are up to date!"
          else
            echo "📦 Updates available, creating PR..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add package.json package-lock.json
            git commit -m "chore: update dependencies"
            git push origin HEAD:dependency-updates
            
            gh pr create \
              --title "chore: Weekly dependency updates" \
              --body "Automated dependency updates from weekly check" \
              --label "dependencies,auto-merge"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
